 Расстоянием Левенштейна между двумя строками s и t называется количество
 атомарных изменений, с помощью которых можно одну строку превратить в другую.
 Под атомарными изменениями подразумеваются: удаление одного символа, вставка
 одного символа, замена одного символа на другой.
 Вводятся две строки. Необходимо для них найти расстояние Левенштейна.

--ПРИНЦИП РАБОТЫ--
 Для решения задачи нахождения расстояния Левенштейна между двух строк используется
 алгоритм Вагнера — Фишера, в общем случае работающий для разных неотрицательных
 стоимостей операций удаления, добавления, замены символов в строках.
 Работа алгоритма сводится к получению рекуррентной формулы.
 Создадим матрицу dp, где dp[i][j] - расстояние между префиксом длины i первой
 строки и префиксом длины j второй строки. Воспользуемся следующими фактами:
 1) расстояние Левенштейна между пустстыми строками равно 0
 2) расстояние между префиксом длины k и префиксом длины 0 равно k
 3) стоимости операций подчиняются неравенству треугольника

 !!!(НЕ ПОДЧИНАЮТСЯ ИЗ-ЗА INF, НУЖНО ПРОВЕРИТЬ)

 Пусть префикс первой строки имеет длину i, префикс второй - j. Рассмотрим
 возможные случаи при обработке последних символов непустых префиксов, то есть
 значение элемента матрицы dp[i][j]:
 1) символы строк, отвечающие индексам i, j совпадают: расстояние Левенштейна
 не изменится и будет равно расстоянию между префиксами длин i - 1 и j - 1,
 таким образом, dp[i][j] = dp[i - 1][j = 1]
 2) соответствующие символы строк не совпадают: необходимо выбрать наименьшую
 стоимость изменения строк в следующих случаях:
   а) удаление последнего символа из первой строки - необходимо работать с
 префиксами длин i - 1 и j. В этом случае dp[i][j] = dp[i - 1][j] + стоимость
 удаления элемента из первой строки;
   б) удаление последнего символа из второй строки - необходимо работать с
 префиксами длин i и j - 1. В этом случае dp[i][j] = dp[i][j - 1] + стоимость
 удаления элемента из второй строки;
   в) замена символа, соответствующего индексу i, в первой строке на символ,
 соответствующий индексу j во второй строке. В этом случае
 dp[i][j] = dp[i - 1][j - 1] + стоимость замены символа из первой строки
 на символ из второй строки;
   г) аналогично предыдущему пункту, но наоборот;

 Таким образом, в матрице dp нужно заполнить первую строку и первый столбец.
 Затем заполнять матрицу построчно. Однако, для получения текущего значения
 dp[i][j] необходима только строка dp[i - 1], поэтому в памяти можно хранить
 только две строки матрицы.

--ВРЕМЕННАЯ СЛОЖНОСТЬ--
 Пусть строки имеют длины n, m.
 Общая временная сложность составит O(n * m)

--ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ--
 O(min(n, m))